{
  "react arrow function component": {
    "prefix": "_tsrface",
    "scope": "typescript, typescriptreact",
    "body": [
      "",
      "// Librerias",
      "import React, { useEffect, useState } from 'react';",
      "",
      "// Contextos",
      "",
      "// Hooks",
      "",
      "// Componentes",
      "",
      "// Imagenes",
      "",
      "// Estilos",
      "",
      "// Tipado",
      "type Props = { any: string; };",
      "",
      "/**",
      " * Descripción del componente.",
      " * ",
      " * @remarks",
      " * Esta es una descripción más detallada del componente. Puedes hablar sobre su funcionamiento, cómo se utiliza, etc.",
      " * ",
      " * @example",
      " * Ejemplo de uso:",
      " * ```jsx",
      " * <${TM_FILENAME_BASE}$1 />",
      " * ```",
      " *",
      " * @returns `JSX.Element` ",
      " *",
      " * @beta",
      " */",
      "",
      "",
      "const ${TM_FILENAME_BASE}$1 = ({ any } : Props): JSX.Element => {",
      "  // Estados",
      "  const [data, setData] = useState([]);",
      "",
      "  // Contextos",
      "",
      "  // Hooks",
      "",
      "  // Funciones",
      "",
      "  // UseEffects",
      "  useEffect(() => {}, []);",
      "",
      "  // Renders",
      "  return <>$2</>;",
      "};",
      "",
      "",
      "export default ${TM_FILENAME_BASE}$1;"
    ],
    "description": "Estructura de un componente react con arrow function, con la estructura para trabajar con nuestro sistema de diseño"
  },

  "react arrow function api component": {
    "prefix": "_tsrfaceapi",
    "scope": "typescript, typescriptreact",
    "body": [
      "",
      "// Librerias",
      "import React, { useEffect, useState } from 'react';",
      "",
      "// Contextos",
      "",
      "// Hooks",
      "",
      "// Componentes",
      "",
      "// Imagenes",
      "",
      "// Estilos",
      "",
      "// Tipado",
      "type Props = { any: string; };",
      "",
      "/**",
      " * Descripción del componente.",
      " * ",
      " * @remarks",
      " * Esta es una descripción más detallada del componente. Puedes hablar sobre su funcionamiento, cómo se utiliza, etc.",
      " * ",
      " * @example",
      " * Ejemplo de uso:",
      " * ```jsx",
      " * <${TM_FILENAME_BASE}$1 />",
      " * ```",
      " *",
      " * @returns `JSX.Element` ",
      " *",
      " * @beta",
      " */",
      "",
      "",
      "const ${TM_FILENAME_BASE}$1 = ({ any } : Props): JSX.Element => {",
      "  // Estados",
      "  const [data, setData] = useState([]);",
      "",
      "  // Contextos",
      "",
      "  // Hooks",
      "",
      "  // Funciones",
      "  const getData = async () => {",
      "     try {",
      "       // const data = await",
      "       console.log(data);",
      "     } catch (error) {",
      "       console.log(error);",
      "     }",
      "  };",
      "",
      "  // UseEffects",
      "  useEffect(() => {",
      "   getData();",
      "  }, []);",
      "",
      "  // Renders",
      "  return <>$2</>;",
      "};",
      "",
      "",
      "",
      "export default ${TM_FILENAME_BASE}$1;"
    ],
    "description": "Estructura de un componente react con arrow function, con la estructura para llamar a una API"
  },

  "react function component": {
    "prefix": "_tsrfc",
    "scope": "typescript, typescriptreact",
    "body": [
      "",
      "// Librerias",
      "import React, { useEffect, useState } from 'react';",
      "",
      "// Contextos",
      "",
      "// Hooks",
      "",
      "// Componentes",
      "",
      "// Imagenes",
      "",
      "// Estilos",
      "",
      "// Tipado",
      "type Props = { any: string; };",
      "",
      "/**",
      " * Descripción del componente.",
      " * ",
      " * @remarks",
      " * Esta es una descripción más detallada del componente. Puedes hablar sobre su funcionamiento, cómo se utiliza, etc.",
      " * ",
      " * @example",
      " * Ejemplo de uso:",
      " * ```jsx",
      " * <${TM_FILENAME_BASE}$1 />",
      " * ```",
      " *",
      " * @returns `JSX.Element` ",
      " *",
      " * @beta",
      " */",
      "",
      "",
      "function ${TM_FILENAME_BASE}$1({ any } : Props) {",
      "  // Estados",
      "  const [data, setData] = useState([]);",
      "",
      "  // Contextos",
      "",
      "  // Hooks",
      "",
      "  // Funciones",
      "",
      "  // UseEffects",
      "  useEffect(() => {}, []);",
      "",
      "  // Renders",
      "  return <>$2</>;",
      "};",
      "",
      "",
      "",
      "export default ${TM_FILENAME_BASE}$1;"
    ],
    "description": "Estructura de un componente react con function, con la estructura para trabajar con nuestro sistema de diseño"
  },

  "react function api component": {
    "prefix": "_tsrfcapi",
    "scope": "typescript, typescriptreact",
    "body": [
      "",
      "// Librerias",
      "import React, { useEffect, useState } from 'react';",
      "",
      "// Contextos",
      "",
      "// Hooks",
      "",
      "// Componentes",
      "",
      "// Imagenes",
      "",
      "// Estilos",
      "",
      "// Tipado",
      "type Props = { any: string; };",
      "",
      "/**",
      " * Descripción del componente.",
      " * ",
      " * @remarks",
      " * Esta es una descripción más detallada del componente. Puedes hablar sobre su funcionamiento, cómo se utiliza, etc.",
      " * ",
      " * @example",
      " * Ejemplo de uso:",
      " * ```jsx",
      " * <${TM_FILENAME_BASE}$1 />",
      " * ```",
      " *",
      " * @returns `JSX.Element` ",
      " *",
      " * @beta",
      " */",
      "",
      "",
      "function ${TM_FILENAME_BASE}$1({ any } : Props) {",
      "  // Estados",
      "  const [data, setData] = useState([]);",
      "",
      "  // Contextos",
      "",
      "  // Hooks",
      "",
      "  // Funciones",
      "  const getData = async () => {",
      "     try {",
      "       // const data = await",
      "       console.log(data);",
      "     } catch (error) {",
      "       console.log(error);",
      "     }",
      "  };",
      "",
      "  // UseEffects",
      "  useEffect(() => {",
      "   getData();",
      "  }, []);",
      "",
      "  // Renders",
      "  return <>$2</>;",
      "};",
      "",
      "",
      "",
      "export default ${TM_FILENAME_BASE}$1;"
    ],
    "description": "Estructura de un componente react con function, con la estructura para llamar a una API"
  },

  "react hook": {
    "prefix": "_tsrhook",
    "scope": "typescript, typescriptreact",
    "body": [
      "",
      "// Librerias",
      "import { useState, useEffect } from 'react';",
      "",
      "// Otros",
      "",
      "// Tipado",
      "type HookData = {};",
      "",
      "/**",
      " * Descripción del hook.",
      " * ",
      " * @remarks",
      " * Esta es una descripción más detallada del hook. Puedes hablar sobre su funcionamiento, cómo se utiliza, etc.",
      " * ",
      " * @example",
      " * Ejemplo de uso:",
      " * ```jsx",
      " * const { data } = use${TM_FILENAME_BASE}$1();",
      " * ```",
      " *",
      " * @returns `HookData` ",
      " *",
      " * @beta",
      " */",
      "",
      "",
      "const use${TM_FILENAME_BASE}$1 = (): HookData => {",
      "  const [tests, setTests] = useState([]);",
      "",
      "  useEffect(() => {}, []);",
      "",
      "  return { tests } as HookData;",
      "};",
      "",
      "",
      "export default use${TM_FILENAME_BASE}$1;",
      ""
    ],
    "description": "Estructura de un hook en react, con la estructura para trabajar con nuestro sistema de diseño"
  },

  "react context": {
    "prefix": "_tsrcontext",
    "scope": "typescript, typescriptreact",
    "body": [
      "",
      "// Librerias",
      "import { createContext, useState } from 'react';",
      "",
      "// Otros",
      "",
      "// Tipado",
      "type ContextData = {};",
      "",
      "/**",
      " * Descripción del contexto.",
      " * ",
      " * @remarks",
      " * Esta es una descripción más detallada del contexto. Puedes hablar sobre su funcionamiento, cómo se utiliza, etc.",
      " * ",
      " * @example",
      " * Ejemplo de uso:",
      " * ```jsx",
      " * <${TM_FILENAME_BASE}$1.Provider>",
      " *   <App />",
      " * </${TM_FILENAME_BASE}$1.Provider>",
      " * ```",
      " *",
      " * @returns `ContextData` ",
      " *",
      " * @beta",
      " */",
      "",
      "const ${TM_FILENAME_BASE}$1 = createContext<ContextData>({} as ContextData);",
      "",
      "export function Provider({ children }) {",
      "  const [state$2, setState$3] = useState({} as ContextData);",
      "",
      "  return (",
      "    <${TM_FILENAME_BASE}$1.Provider value={{ state$2, setState$3 }}>{children}</${TM_FILENAME_BASE}$1.Provider>",
      "  );",
      "}",
      "export default ${TM_FILENAME_BASE}$1;",
      ""
    ],
    "description": "Estructura de un contexto en react, con la estructura para trabajar con nuestro sistema de diseño"
  }
}
